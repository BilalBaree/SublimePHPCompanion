name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security_checks:
    runs-on: ubuntu-latest

    steps:
      # 1. Enforce code reviews - Only run on pull request events
      - name: Check if Pull Request has at least one review
        if: github.event_name == 'pull_request'
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
        continue-on-error: false
        
      # 2. Enforce signed commits
      - name: Check if commits are signed
        run: |
          git log --pretty=format:'%h %G? %an' | while read line; do
            commit_hash=$(echo $line | cut -d ' ' -f 1)
            commit_status=$(echo $line | cut -d ' ' -f 2)
            if [[ "$commit_status" != "G" ]]; then
              echo "Commit $commit_hash is not signed"
              exit 1
            fi
          done
        continue-on-error: false

  # Role-based Access Control
  roles_access_control:
    runs-on: ubuntu-latest

    steps:
      # 3. Check for role-based access controls for CI/CD
      - name: Ensure CI/CD access control is set
        run: |
          if [[ "$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -s "https://api.github.com/repos/${{ github.repository }}/collaborators" | jq '.[] | select(.permissions.push == true)' | wc -l)" -lt 1 ]]; then
            echo "Role-based CI/CD access is not set correctly"
            exit 1
          fi

        
  # Maintain audit logs of security events
  audit_log:
    runs-on: ubuntu-latest

    steps:
      - name: Log security event
        run: |
          echo "$(date) - Security event: CI/CD pipeline executed with security checks." >> ./audit_log.txt
          cat ./audit_log.txt

  # Security Rules: Secrets Scanning and SQL Injection Prevention
  security_rules:
    runs-on: ubuntu-latest
    steps:
      # 5. Secrets Scanning - Detect hardcoded API keys, passwords, and secrets
      - name: Check for hardcoded secrets with TruffleHog
        run: |
          if [[ -f "secrets_scan_results.json" && $(jq '.results | length' secrets_scan_results.json) -gt 0 ]]; then
            echo "Secrets found in the code!"
            exit 1
          fi
        continue-on-error: false

      # 6. SQL Injection Prevention - Bandit checks for unsafe database queries (B107 rule)
      - name: Check for SQL Injection issues with Bandit
        run: |
          pip install bandit
          bandit -r . -s B107 -o bandit_sql_report.txt
          if grep -q "issue found" bandit_sql_report.txt; then
            echo "SQL Injection issue detected!"
            exit 1
          fi
        continue-on-error: false

  # Optional: Merge Check - Only allow merge if security checks pass
  merge_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check if code passes security checks before merge
        run: |
          security_check_passed=true
          # Check if secrets scan failed
          if [[ -f "secrets_scan_results.json" && $(jq '.results | length' secrets_scan_results.json) -gt 0 ]]; then
            echo "Secrets scan failed, issues found."
            security_check_passed=false
          fi
          # Check if Bandit found SQL injection issues
          if grep -q "issue found" bandit_sql_report.txt; then
            echo "SQL Injection prevention check failed, issues found."
            security_check_passed=false
          fi
          if [[ "$security_check_passed" == false ]]; then
            echo "Security checks failed. Merge not allowed."
            exit 1
          else
            echo "Security checks passed. Merge allowed."
          fi
dast_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          pip install sqlmap
          sudo apt-get install zaproxy

      - name: Run SQLMap (SQL Injection Detection)
        run: |
          sqlmap -u "http://your-app-url.com" --batch --risk=3 --level=5

      - name: Run OWASP ZAP (Cross-Site Scripting and CSRF Detection)
        run: |
          zaproxy -cmd -quickurl http://your-app-url.com -quickout zap_report.html
          
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v2
        with:
          name: zap-report
          path: zap_report.html

      - name: Upload SQLMap Report
        uses: actions/upload-artifact@v2
        with:
          name: sqlmap-report
          path: sqlmap_report.txt
