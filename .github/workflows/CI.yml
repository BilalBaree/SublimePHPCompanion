name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Security Checks
  security_checks:
    runs-on: ubuntu-latest

    steps:
      # 1. Enforce code reviews (Only run on pull request events)
      - name: Check if Pull Request has at least one review
        if: github.event_name == 'pull_request'
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
        continue-on-error: false

      # 2. Enforce signed commits
      - name: Check if commits are signed
        run: |
          git log --pretty=format:'%h %G? %an' | while read line; do
            commit_hash=$(echo $line | cut -d ' ' -f 1)
            commit_status=$(echo $line | cut -d ' ' -f 2)
            if [[ "$commit_status" != "G" ]]; then
              echo "Commit $commit_hash is not signed"
              exit 1
            fi
          done
        continue-on-error: false

  # Job 2: Role-based Access Control
  roles_access_control:
    runs-on: ubuntu-latest

    steps:
      # 3. Ensure CI/CD access control is set
      - name: Ensure CI/CD access control is set
        run: |
          if [[ "$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -s "https://api.github.com/repos/${{ github.repository }}/collaborators" | jq '.[] | select(.permissions.push == true)' | wc -l)" -lt 1 ]]; then
            echo "Role-based CI/CD access is not set correctly"
            exit 1
          fi

  # Job 3: Audit Logs of Security Events
  audit_log:
    runs-on: ubuntu-latest

    steps:
      - name: Log security event
        run: |
          echo "$(date) - Security event: CI/CD pipeline executed with security checks." >> ./audit_log.txt
          cat ./audit_log.txt

  # Job 4: Security Rules - Secrets Scanning and SQL Injection Prevention
  security_rules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install trufflehog bandit jq

      - name: Check for hardcoded secrets & Run TruffleHog Secrets Scan
        run: |
          trufflehog --json . > secrets_scan_results.json
          if [[ -f "secrets_scan_results.json" && $(jq length secrets_scan_results.json) -gt 0 ]]; then
            echo "❌ Secrets found in the code!"
            cat secrets_scan_results.json
            exit 1
          else
            echo "✅ No secrets found."
          fi
        continue-on-error: false

      - name: Check for SQL Injection issues with Bandit
        run: |
          bandit -r . -f json -o bandit_sql_report.txt -t B107
          if grep -q "issue" bandit_sql_report.txt; then
            echo "SQL Injection issue detected!"
            cat bandit_sql_report.txt
            exit 1
          fi
        continue-on-error: false
